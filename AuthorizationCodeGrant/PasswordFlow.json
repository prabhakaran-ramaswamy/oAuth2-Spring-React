{
    "info": {
        "name": "OAuth2 Password Grant Flow",
        "description": "OAuth2 Resource Owner Password Credentials Grant flow",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "authorization_server_url",
            "value": "http://localhost:8080",
            "type": "string",
            "description": "Authorization server base URL"
        },
        {
            "key": "client_id",
            "value": "demo-client",
            "type": "string",
            "description": "OAuth2 client identifier"
        },
        {
            "key": "client_secret",
            "value": "demo-secret",
            "type": "string",
            "description": "OAuth2 client secret"
        },
        {
            "key": "username",
            "value": "testuser",
            "type": "string",
            "description": "Resource owner username"
        },
        {
            "key": "password",
            "value": "testpassword",
            "type": "string",
            "description": "Resource owner password"
        },
        {
            "key": "scopes",
            "value": "read write profile",
            "type": "string",
            "description": "Requested OAuth2 scopes"
        },
        {
            "key": "access_token",
            "value": "",
            "type": "string",
            "description": "Access token received from password grant"
        },
        {
            "key": "refresh_token",
            "value": "",
            "type": "string",
            "description": "Refresh token received from password grant"
        }
    ],
    "item": [
        {
            "name": "Step 1: POST /token (Password Grant)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Parse response and save tokens",
                            "if (pm.response.code === 200) {",
                            "    const response = pm.response.json();",
                            "    ",
                            "    // Save tokens to collection variables",
                            "    pm.collectionVariables.set('access_token', response.access_token);",
                            "    ",
                            "    if (response.refresh_token) {",
                            "        pm.collectionVariables.set('refresh_token', response.refresh_token);",
                            "    }",
                            "    ",
                            "    // Log token information",
                            "    console.log('✅ Password grant successful!');",
                            "    console.log('Access Token:', response.access_token.substring(0, 50) + '...');",
                            "    console.log('Token Type:', response.token_type);",
                            "    console.log('Expires In:', response.expires_in + ' seconds');",
                            "    ",
                            "    if (response.refresh_token) {",
                            "        console.log('Refresh Token:', response.refresh_token.substring(0, 50) + '...');",
                            "    }",
                            "    ",
                            "    if (response.scope) {",
                            "        console.log('Granted Scopes:', response.scope);",
                            "    }",
                            "    ",
                            "} else {",
                            "    console.log('❌ Password grant failed');",
                            "    console.log('Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded",
                        "type": "text"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "key": "grant_type",
                            "value": "password",
                            "description": "Required. Must be 'password'",
                            "type": "text"
                        },
                        {
                            "key": "username",
                            "value": "{{username}}",
                            "description": "Required. Resource owner username",
                            "type": "text"
                        },
                        {
                            "key": "password",
                            "value": "{{password}}",
                            "description": "Required. Resource owner password",
                            "type": "text"
                        },
                        {
                            "key": "scope",
                            "value": "{{scopes}}",
                            "description": "Optional. Space-separated list of scopes",
                            "type": "text"
                        },
                        {
                            "key": "client_id",
                            "value": "{{client_id}}",
                            "description": "Required. OAuth2 client identifier",
                            "type": "text"
                        },
                        {
                            "key": "client_secret",
                            "value": "{{client_secret}}",
                            "description": "Required. OAuth2 client secret",
                            "type": "text"
                        }
                    ]
                },
                "url": {
                    "raw": "{{authorization_server_url}}/token",
                    "host": ["{{authorization_server_url}}"],
                    "path": ["token"]
                },
                "description": "Step 1: Password Grant Request\n\nDirectly exchange username and password for access token.\n\n**Request Body:**\n- grant_type: Must be 'password'\n- username: Resource owner username\n- password: Resource owner password\n- scope: Requested scopes (optional)\n- client_id: Your application's client ID\n- client_secret: Your application's client secret\n\n**Response:**\n- access_token: Token for accessing protected resources\n- token_type: Usually 'Bearer'\n- expires_in: Token lifetime in seconds\n- refresh_token: Token for getting new access tokens\n- scope: Granted scopes\n\n**Note:** This flow should only be used when the client is trusted (e.g., first-party applications)."
            }
        },
        {
            "name": "Step 2: Test Protected Resource",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "url": {
                    "raw": "{{authorization_server_url}}/api/protected",
                    "host": ["{{authorization_server_url}}"],
                    "path": ["api", "protected"]
                },
                "description": "Step 2: Access Protected Resource\n\nTest accessing a protected resource using the access token obtained from password grant.\n\n**Prerequisites:**\n1. Must have completed Step 1 (POST /token with password grant)\n2. Access token must be valid and not expired\n\n**Authorization:**\n- Type: Bearer Token\n- Token: Uses the access_token variable from step 1\n\n**Expected Response:**\n- 200 OK: Access granted\n- 401 Unauthorized: Token invalid or expired\n- 403 Forbidden: Token valid but insufficient permissions"
            }
        },
        {
            "name": "Step 3: Get User Info",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [
                    {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "url": {
                    "raw": "{{authorization_server_url}}/userinfo",
                    "host": ["{{authorization_server_url}}"],
                    "path": ["userinfo"]
                },
                "description": "Step 3: Get User Information\n\nRetrieve user information using the access token.\n\n**Prerequisites:**\n1. Valid access token from password grant\n2. Token must have appropriate scope (e.g., 'profile')\n\n**Authorization:**\n- Type: Bearer Token\n- Token: Uses the access_token variable\n\n**Expected Response:**\n- User profile information (name, email, etc.)\n- Response format depends on granted scopes"
            }
        },
        {
            "name": "Step 4: Refresh Token",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Parse response and update tokens",
                            "if (pm.response.code === 200) {",
                            "    const response = pm.response.json();",
                            "    ",
                            "    // Update access token",
                            "    pm.collectionVariables.set('access_token', response.access_token);",
                            "    ",
                            "    // Update refresh token if provided",
                            "    if (response.refresh_token) {",
                            "        pm.collectionVariables.set('refresh_token', response.refresh_token);",
                            "    }",
                            "    ",
                            "    console.log('✅ Tokens refreshed successfully!');",
                            "    console.log('New Access Token:', response.access_token.substring(0, 50) + '...');",
                            "    ",
                            "} else {",
                            "    console.log('❌ Token refresh failed');",
                            "    console.log('Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded",
                        "type": "text"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "key": "grant_type",
                            "value": "refresh_token",
                            "description": "Required. Must be 'refresh_token'",
                            "type": "text"
                        },
                        {
                            "key": "refresh_token",
                            "value": "{{refresh_token}}",
                            "description": "Required. Refresh token from previous token response",
                            "type": "text"
                        },
                        {
                            "key": "client_id",
                            "value": "{{client_id}}",
                            "description": "Required. OAuth2 client identifier",
                            "type": "text"
                        },
                        {
                            "key": "client_secret",
                            "value": "{{client_secret}}",
                            "description": "Required. OAuth2 client secret",
                            "type": "text"
                        },
                        {
                            "key": "scope",
                            "value": "{{scopes}}",
                            "description": "Optional. Requested scopes for new token",
                            "type": "text",
                            "disabled": true
                        }
                    ]
                },
                "url": {
                    "raw": "{{authorization_server_url}}/token",
                    "host": ["{{authorization_server_url}}"],
                    "path": ["token"]
                },
                "description": "Step 4: Refresh Access Token\n\nUse the refresh token to obtain a new access token without requiring user re-authentication.\n\n**Prerequisites:**\n1. Must have a valid refresh_token from step 1\n2. Refresh token must not be expired\n\n**Request Body:**\n- grant_type: Must be 'refresh_token'\n- refresh_token: The refresh token from previous response\n- client_id: Your application's client ID\n- client_secret: Your application's client secret\n- scope: Optional, can request different scopes\n\n**Response:**\n- access_token: New access token\n- token_type: Usually 'Bearer'\n- expires_in: New token lifetime\n- refresh_token: May be a new refresh token or the same one"
            }
        },
        {
            "name": "Alternative: Basic Auth Password Grant",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Parse response and save tokens",
                            "if (pm.response.code === 200) {",
                            "    const response = pm.response.json();",
                            "    pm.collectionVariables.set('access_token', response.access_token);",
                            "    if (response.refresh_token) {",
                            "        pm.collectionVariables.set('refresh_token', response.refresh_token);",
                            "    }",
                            "    console.log('✅ Password grant with Basic Auth successful!');",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "basic",
                    "basic": [
                        {
                            "key": "username",
                            "value": "{{client_id}}",
                            "type": "string"
                        },
                        {
                            "key": "password",
                            "value": "{{client_secret}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded",
                        "type": "text"
                    },
                    {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "key": "grant_type",
                            "value": "password",
                            "description": "Required. Must be 'password'",
                            "type": "text"
                        },
                        {
                            "key": "username",
                            "value": "{{username}}",
                            "description": "Required. Resource owner username",
                            "type": "text"
                        },
                        {
                            "key": "password",
                            "value": "{{password}}",
                            "description": "Required. Resource owner password",
                            "type": "text"
                        },
                        {
                            "key": "scope",
                            "value": "{{scopes}}",
                            "description": "Optional. Space-separated list of scopes",
                            "type": "text"
                        }
                    ]
                },
                "url": {
                    "raw": "{{authorization_server_url}}/token",
                    "host": ["{{authorization_server_url}}"],
                    "path": ["token"]
                },
                "description": "Alternative: Password Grant with Basic Authentication\n\nSame as Step 1 but uses HTTP Basic Authentication for client credentials instead of form parameters.\n\n**Authentication:**\n- Type: Basic Auth\n- Username: client_id\n- Password: client_secret\n\n**Request Body:**\n- grant_type: Must be 'password'\n- username: Resource owner username\n- password: Resource owner password\n- scope: Requested scopes (optional)\n\n**Note:** Client credentials are sent in Authorization header instead of request body."
            }
        }
    ],
    "auth": {
        "type": "noauth"
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Generate random state for each request if needed",
                    "// pm.collectionVariables.set('state', Math.random().toString(36).substring(7));"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test scripts can be added here"
                ]
            }
        }
    ]
}
