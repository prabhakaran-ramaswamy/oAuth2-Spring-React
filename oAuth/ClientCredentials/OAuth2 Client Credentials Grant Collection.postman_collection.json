{
	"info": {
		"_postman_id": "c8788a25-c4d9-468f-998c-552a2831fe1c",
		"name": "OAuth2 Client Credentials Grant Collection",
		"description": "Collection for testing OAuth 2.0 Client Credentials Grant",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "10250813"
	},
	"item": [
		{
			"name": "Step 1: No Access (Test Protected Resource)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 401 (Unauthorized)', function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test('Response indicates authentication required', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.error).to.eql('Unauthorized');",
							"});",
							"",
							"console.log('❌ Access denied without token (expected behavior)');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": "http://localhost:8081/api/employees",
				"description": "Step 1: Test Protected Resource Without Token\n\nThis request attempts to access a protected resource without any authentication token, which should return a 401 Unauthorized response.\n\n**Purpose:**\n- Verify that protected resources require authentication\n- Confirm proper error handling\n\n**Expected Response:**\n- 401 Unauthorized\n- Error message indicating authentication required"
			},
			"response": []
		},
		{
			"name": "Step 2: Get Access Token (Client Credentials)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    ",
							"    // Save access token to collection variable",
							"    pm.collectionVariables.set('access_token', response.access_token);",
							"    ",
							"    // Log success information",
							"    console.log('✅ Client Credentials grant successful!');",
							"    console.log('Access Token:', response.access_token.substring(0, 50) + '...');",
							"    console.log('Token Type:', response.token_type);",
							"    console.log('Expires In:', response.expires_in + ' seconds');",
							"    ",
							"    if (response.scope) {",
							"        console.log('Granted Scopes:', response.scope);",
							"    }",
							"    ",
							"    // Test assertions",
							"    pm.test('Access token received', function () {",
							"        pm.expect(response.access_token).to.exist;",
							"        pm.expect(response.access_token).to.be.a('string');",
							"        pm.expect(response.access_token.length).to.be.greaterThan(10);",
							"    });",
							"    ",
							"    pm.test('Token type is Bearer', function () {",
							"        pm.expect(response.token_type).to.eql('Bearer');",
							"    });",
							"    ",
							"    pm.test('Token expires in reasonable time', function () {",
							"        pm.expect(response.expires_in).to.be.a('number');",
							"        pm.expect(response.expires_in).to.be.greaterThan(0);",
							"    });",
							"    ",
							"} else {",
							"    console.log('❌ Client Credentials grant failed');",
							"    console.log('Status:', pm.response.code);",
							"    console.log('Response:', pm.response.text());",
							"    ",
							"    pm.test('Client Credentials grant failed', function () {",
							"        pm.expect.fail('Failed to get access token: ' + pm.response.text());",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"description": "Required. Must be 'client_credentials'",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "demo-client",
							"description": "Required. OAuth2 client identifier",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "demo-secret",
							"description": "Required. OAuth2 client secret",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid profile",
							"description": "Optional. Space-separated list of scopes",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/oauth2/token",
				"description": "Step 2: Client Credentials Grant\n\nRequest an access token using the client credentials grant type. This flow is used when the application itself (not a user) needs to access resources.\n\n**Grant Type:** Client Credentials\n- Used for machine-to-machine authentication\n- No user interaction required\n- Client authenticates with its own credentials\n\n**Request Parameters:**\n- grant_type: Must be 'client_credentials'\n- client_id: Application's client identifier\n- client_secret: Application's client secret\n- scope: Requested permissions (optional)\n\n**Response:**\n- access_token: Token for accessing protected resources\n- token_type: Usually 'Bearer'\n- expires_in: Token lifetime in seconds\n- scope: Granted scopes\n\n**Note:** No refresh token is issued for client credentials flow"
			},
			"response": []
		},
		{
			"name": "Step 3: Test protected Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const userInfo = pm.response.json();",
							"    ",
							"    console.log('✅ UserInfo retrieved successfully!');",
							"    console.log('Subject:', userInfo.sub || 'N/A');",
							"    console.log('User Info:', JSON.stringify(userInfo, null, 2));",
							"    ",
							"    pm.test('UserInfo retrieved successfully', function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test('Response has subject claim', function () {",
							"        pm.expect(userInfo).to.have.property('sub');",
							"    });",
							"    ",
							"} else if (pm.response.code === 403) {",
							"    console.log('⚠️ UserInfo access forbidden - missing openid scope');",
							"    console.log('Client credentials may not have openid scope');",
							"    ",
							"    pm.test('UserInfo forbidden due to scope', function () {",
							"        pm.response.to.have.status(403);",
							"    });",
							"    ",
							"} else {",
							"    console.log('❌ UserInfo request failed');",
							"    console.log('Status:', pm.response.code);",
							"    console.log('Response:', pm.response.text());",
							"    ",
							"    pm.test('UserInfo request failed', function () {",
							"        pm.expect.fail('UserInfo failed: ' + pm.response.text());",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJraWQiOiJjYTJkMzc4Ny04MTc2LTRlNDgtYmE2ZC0yMDFhZGJhMjI5YTQiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJkZW1vLWNsaWVudCIsImF1ZCI6ImRlbW8tY2xpZW50IiwibmJmIjoxNzU2Nzg0Nzc0LCJzY29wZSI6WyJvcGVuaWQiLCJwcm9maWxlIl0sImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCIsImV4cCI6MTc1Njc4NjU3NCwiaWF0IjoxNzU2Nzg0Nzc0LCJqdGkiOiI1NzkzNjJmZi05MjEwLTQ3MzUtYWNlYS01MWFjYzRjZTQ0MDcifQ.LRobDOqMV6YYosIt7oF6BTumPj6nJB-Ik41sb-HkuEIuVthmkQ-PqxNb6OlSmVv5yXJ7ENiNkuGe1Z4SqMEi9XU1uItYLtiXlVAwNMd99WKl-yfxRpX9F50jZg_PTs8Dz87ZKSHkdO6IClqehV5TF4MQgUxe6sOdkgtDwr0k1-F434vgKQGM4vHKHB9RzM_i4ZcoGUL8kVUa7MojM_YCxVLHqvJduvprYDNtUO4kboD1789fdpF1Anm65iYr-jlUDsrKLgIC4MTUHZUbFg7KV6DgdUQB_Zcje2Nak3M7TgwQbpLndPQKR5-xfdUUfn54vj-zGHpGFhifB1LBSy25Zw",
						"type": "text"
					}
				],
				"url": "http://localhost:8081/api/employees",
				"description": "Step 3: Test UserInfo Endpoint\n\nTest accessing the OpenID Connect UserInfo endpoint using the client credentials access token.\n\n**Prerequisites:**\n1. Must have completed Step 2 (Client Credentials Grant)\n2. Access token must be valid and not expired\n\n**Authorization:**\n- Type: Bearer Token\n- Token: Uses the access_token from client credentials flow\n\n**Expected Responses:**\n- 200 OK: UserInfo returned (if openid scope granted)\n- 403 Forbidden: Valid token but missing openid scope\n- 401 Unauthorized: Token invalid or expired\n\n**Note:** Client credentials flow typically doesn't include openid scope, so 403 is expected"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set current timestamp for debugging",
					"pm.collectionVariables.set('timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_server_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "demo-client",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "demo-secret",
			"type": "string"
		},
		{
			"key": "scope",
			"value": "read write",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "timestamp",
			"value": "",
			"type": "string"
		}
	]
}