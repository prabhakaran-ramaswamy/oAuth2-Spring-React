{
	"info": {
		"_postman_id": "d5d9fba2-aa5a-408a-881c-a6eddba4ccbe",
		"name": "OAuth Password Grant Collection",
		"description": "Collection for testing OAuth 2.0 Password Grant Type",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "10250813"
	},
	"item": [
		{
			"name": "1. No Access",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 401', function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test('Error message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.eql('Unauthorized');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": "http://localhost:8081/api/employees",
				"description": "Test accessing protected resource without token (should return 401)"
			},
			"response": []
		},
		{
			"name": "2. Get Access Token (Password Grant)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set('access_token', response.access_token);",
							"    pm.test('Access token received', function () {",
							"        pm.expect(response.access_token).to.exist;",
							"    });",
							"} else {",
							"    pm.test('Token request failed', function () {",
							"        pm.expect.fail('Failed to get access token');",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "client_secret",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "client_secret",
							"type": "text"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid profile",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/oauth2/token",
				"description": "Request access token using password grant type"
			},
			"response": []
		},
		{
			"name": "3. Test Protected Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has user data', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('sub');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": "http://localhost:8081/api/employees",
				"description": "Test accessing a protected resource with the access token"
			},
			"response": []
		},
		{
			"name": "4. Refresh Token (if supported)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set('access_token', response.access_token);",
							"    pm.test('New access token received', function () {",
							"        pm.expect(response.access_token).to.exist;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{refresh_token}}",
							"description": "Set this manually from the first token response",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/oauth2/token",
				"description": "Refresh the access token using refresh token"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_server_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "my-client-id",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "my-client-secret",
			"type": "string"
		},
		{
			"key": "username",
			"value": "john.doe@example.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "password123",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "resource_server_url",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
}